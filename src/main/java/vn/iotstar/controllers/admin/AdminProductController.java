package vn.iotstar.controllers.admin;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
// import jakarta.servlet.http.Part; // Gi·ªØ l·∫°i n·∫øu c·∫ßn x·ª≠ l√Ω upload file
import vn.iotstar.entities.Product; // C·∫ßn import Product
import vn.iotstar.entities.ProductComment;
import vn.iotstar.entities.ProductReview;
import vn.iotstar.entities.Category; // C·∫ßn import Category
import vn.iotstar.entities.Shop; // C·∫ßn import Shop (d√†nh cho b·ªô l·ªçc)
import vn.iotstar.services.admin.AdminCategoryService;
import vn.iotstar.services.admin.AdminProductService;
import vn.iotstar.services.admin.AdminShopService; // Gi·∫£ ƒë·ªãnh c√≥ ShopService

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
// import java.nio.file.Paths; // Gi·ªØ l·∫°i n·∫øu c·∫ßn x·ª≠ l√Ω upload file
import java.util.List;

@MultipartConfig
@WebServlet(urlPatterns = { "/admin/products", "/admin/products/add", "/admin/products/edit", "/admin/products/detail", // Th√™m
																														// detail
		"/admin/products/toggle-ban/*" })
public class AdminProductController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	// S·ª≠ d·ª•ng Service ƒë√∫ng cho Product, Category, v√† Shop
	private AdminProductService adminProductService = new AdminProductService();
	private AdminCategoryService adminCategoryService = new AdminCategoryService();
	private AdminShopService adminShopService = new AdminShopService(); // Kh·ªüi t·∫°o Shop Service

	// ===================================================
	// GET REQUESTS (Hi·ªÉn th·ªã)
	// ===================================================

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String url = request.getRequestURI();

		// ----------------------------------------------------
		// üü© Trang danh s√°ch (c√≥ b·ªô l·ªçc v√† ph√¢n trang)
		// ----------------------------------------------------
		if (url.endsWith("/admin/products")) {
			// L·∫•y tham s·ªë t·ª´ query string
			String keyword = request.getParameter("keyword");
			String bannedParam = request.getParameter("banned");
			String pageParam = request.getParameter("page");
			String categoryIdParam = request.getParameter("categoryId");
			String shopIdParam = request.getParameter("shopId");

			// Chuy·ªÉn ƒë·ªïi tham s·ªë
			Long categoryId = (categoryIdParam != null && !categoryIdParam.isEmpty()) ? Long.parseLong(categoryIdParam)
					: null;
			Long shopId = (shopIdParam != null && !shopIdParam.isEmpty()) ? Long.parseLong(shopIdParam) : null;
			Boolean isBanned = (bannedParam != null && !bannedParam.isEmpty()) ? Boolean.parseBoolean(bannedParam)
					: null;

			int currentPage = 1;
			int pageSize = 10;
			if (pageParam != null && !pageParam.isEmpty()) {
				try {
					currentPage = Integer.parseInt(pageParam);
				} catch (NumberFormatException e) {
					/* M·∫∑c ƒë·ªãnh 1 */ }
			}

			// L·∫•y danh s√°ch Product (C·∫ßn ph·∫£i c√≥ ph∆∞∆°ng th·ª©c t√¨m ki·∫øm n√¢ng cao trong
			// ProductService)
			// C·∫ßn s·ª≠a Service ƒë·ªÉ t√¨m ki·∫øm Product, kh√¥ng ph·∫£i Category
			
			Shop shop = null;
			if(shopId != null) {
				shop = adminShopService.findById(shopId);
			}
			
			
			Category category = null;
			if(categoryId != null) {
				category = adminCategoryService.findById(categoryId);
			}
			

			List<Product> products = adminProductService.searchProducts(keyword, isBanned, shop, category, currentPage,
					pageSize);

			int totalProducts = adminProductService.countProducts(keyword, isBanned, shop, category);
			int totalPages = (int) Math.ceil((double) totalProducts / pageSize);

			// L·∫•y danh s√°ch l·ªçc (Category & Shop) ƒë·ªÉ ƒë∆∞a v√†o Select Box tr√™n JSP
			List<Category> categories = adminCategoryService.findAllCategoriesValidate(); // Gi·∫£ s·ª≠ c√≥ findAll
			List<Shop> shops = adminShopService.findAllShopsValidate(); // Gi·∫£ s·ª≠ c√≥ findAll

			// ƒê∆∞a d·ªØ li·ªáu sang JSP
			request.setAttribute("products", products);
			request.setAttribute("categories", categories); // Cho b·ªô l·ªçc
			request.setAttribute("shops", shops); // Cho b·ªô l·ªçc
			request.setAttribute("currentPage", currentPage);
			request.setAttribute("totalPages", totalPages);
			request.setAttribute("pageSize", pageSize);

			// Chuy·ªÉn ƒë·∫øn JSP c·ªßa Product
			request.getRequestDispatcher("/WEB-INF/views/admin/products/list.jsp").forward(request, response);

			// ----------------------------------------------------
			// üü® Trang th√™m m·ªõi
			// ----------------------------------------------------
		} else if (url.endsWith("/add")) {
			// C·∫ßn l·∫•y danh s√°ch Category v√† Shop ƒë·ªÉ t·∫°o form
			request.setAttribute("categories", adminCategoryService.findAllCategoriesValidate());
			request.setAttribute("shops", adminShopService.findAllShopsValidate());
			request.getRequestDispatcher("/WEB-INF/views/admin/products/add.jsp").forward(request, response);

			// ----------------------------------------------------
			// üü¶ Trang ch·ªânh s·ª≠a
			// ----------------------------------------------------
		} else if (url.endsWith("/edit")) {
			try {
				Long id = Long.parseLong(request.getParameter("id"));
				Product product = adminProductService.findById(id); // T√¨m Product

				if (product == null) {
					response.sendError(HttpServletResponse.SC_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
					return;
				}

				// C·∫ßn l·∫•y danh s√°ch Category v√† Shop ƒë·ªÉ t·∫°o form
				request.setAttribute("product", product);
				request.setAttribute("categories", adminCategoryService.findAllCategoriesValidate());
				request.setAttribute("shops", adminShopService.findAllShopsValidate());
				request.getRequestDispatcher("/WEB-INF/views/admin/products/edit.jsp").forward(request, response);

			} catch (NumberFormatException e) {
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "ID kh√¥ng h·ª£p l·ªá.");
			}

			// üü™ Trang chi ti·∫øt
		} else if (url.endsWith("/detail")) {
			try {
				Long id = Long.parseLong(request.getParameter("id"));
				Product product = adminProductService.findById(id);
				
				List<ProductComment> comments = adminProductService.productComments(id);
				List<ProductReview> reviews = adminProductService.productReviews(id);
				
				if (product == null) {
					response.sendError(HttpServletResponse.SC_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.");
					return;
				}

				request.setAttribute("productDetail", product);
				request.setAttribute("comments", comments);
				request.setAttribute("reviews", reviews);
				
				request.getRequestDispatcher("/WEB-INF/views/admin/products/product-detail.jsp").forward(request, response);

			} catch (NumberFormatException e) {
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "ID kh√¥ng h·ª£p l·ªá.");
			}
		}
	}

	// ===================================================
	// POST REQUESTS (Thao t√°c)
	// ===================================================

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

		req.setCharacterEncoding("UTF-8");
		String uri = req.getRequestURI();

		// ----------------------------------------------------
		// üü• X·ª≠ l√Ω C·∫•m/B·ªè C·∫•m (toggle-ban)
		// ----------------------------------------------------
		if (uri.contains("/toggle-ban/")) {
			// L·∫•y ID t·ª´ URI, v√≠ d·ª•: /admin/products/toggle-ban/5
			String[] parts = uri.split("/");
			Long id = Long.parseLong(parts[parts.length - 1]);

			Product product = adminProductService.findById(id);
			if (product != null) {
				// ƒê·∫£o tr·∫°ng th√°i isBanned
				product.setIsBanned(!product.getIsBanned());
				adminProductService.edit(product);
			}

			// Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch s·∫£n ph·∫©m
			resp.sendRedirect(req.getContextPath() + "/admin/products");
			return;
		}

		// ‚úÖ ƒê∆∞·ªùng d·∫´n l∆∞u ·∫£nh ngo√†i project
//		String type = "products"; // ƒê·ªïi th√†nh products
//		String uploadPath = "F:/HK1_25_26/LTWEB/uploads/" + type;
//		File uploadDir = new File(uploadPath);
//		if (!uploadDir.exists())
//			uploadDir.mkdirs();

		// ----------------------------------------------------
		// üü¶ X·ª≠ l√Ω Th√™m m·ªõi (C·∫ßn ho√†n thi·ªán logic l·∫•y data)
		// ----------------------------------------------------
		if (uri.endsWith("/add")) {
			// L·∫•y d·ªØ li·ªáu Product t·ª´ form (c·∫ßn ho√†n thi·ªán)
			String productName = req.getParameter("productName");
			// ... (c√°c tr∆∞·ªùng kh√°c: price, stock, categoryId, shopId, description,
			// isBanned...)

			// Product product = Product.builder()...build();
			// adminProductService.add(product);
		}

		// ----------------------------------------------------
		// üüß X·ª≠ l√Ω Ch·ªânh s·ª≠a (C·∫ßn ho√†n thi·ªán logic l·∫•y data)
		// ----------------------------------------------------
		// Gi·∫£ ƒë·ªãnh b·∫°n ƒëang ·ªü trong ph∆∞∆°ng th·ª©c doPost(HttpServletRequest req, HttpServletResponse resp)
		// ...

		else if (uri.endsWith("/edit")) {
		    try {
		        // L·∫•y ID s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a
		        Long id = Long.parseLong(req.getParameter("productId"));
		        
		        // 1. T√¨m s·∫£n ph·∫©m hi·ªán t·∫°i trong DB
		        Product product = adminProductService.findById(id);

		        if (product != null) {
		            
		            // 2. L·∫•y v√† chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ form
		            
		            // L·∫•y gi√° tr·ªã chu·ªói
		            String priceStr = req.getParameter("price");
		            String discountPriceStr = req.getParameter("discountPrice");
		            String stockStr = req.getParameter("stock");
		            String categoryIdStr = req.getParameter("categoryId");
		            String shopIdStr = req.getParameter("shopId");
		            
		            // X·ª≠ l√Ω Checkbox isBanned: N·∫øu tham s·ªë t·ªìn t·∫°i (kh√°c null), nghƒ©a l√† n√≥ ƒë√£ ƒë∆∞·ª£c check (TRUE)
		            // N·∫øu tham s·ªë l√† null, nghƒ©a l√† n√≥ kh√¥ng ƒë∆∞·ª£c check (FALSE)
		            Boolean isBanned = (req.getParameter("isBanned") != null);
		            
		            
		            // 3. Chuy·ªÉn ƒë·ªïi v√† g√°n d·ªØ li·ªáu s·ªë/ƒë·ªëi t∆∞·ª£ng
		            
		            // Chuy·ªÉn ƒë·ªïi BigDecimal (C·∫ßn x·ª≠ l√Ω r·ªóng/null an to√†n)
		            BigDecimal price = new BigDecimal(priceStr);
		            BigDecimal discountPrice = (discountPriceStr != null && !discountPriceStr.isEmpty()) 
		                                        ? new BigDecimal(discountPriceStr) 
		                                        : null; // ho·∫∑c BigDecimal.ZERO
		            
		            int stock = Integer.parseInt(stockStr);
		            
		            // L·∫•y ƒë·ªëi t∆∞·ª£ng Category v√† Shop t·ª´ ID
		            Category category = adminCategoryService.findById(Long.parseLong(categoryIdStr));
		            Shop shop = adminShopService.findById(Long.parseLong(shopIdStr));
		            
		            
		            // 4. Set d·ªØ li·ªáu m·ªõi v√†o ƒë·ªëi t∆∞·ª£ng Product
		            product.setProductName(req.getParameter("productName"));
		            product.setPrice(price);
		            product.setDiscountPrice(discountPrice);
		            product.setStock(stock);
		            product.setDescription(req.getParameter("description"));
		            product.setCategory(category);
		            product.setShop(shop);
		            product.setIsBanned(isBanned); // <--- ƒê√£ x·ª≠ l√Ω Checkbox t·∫°i ƒë√¢y
		            
		            
		            // 5. L∆∞u c·∫≠p nh·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu
		            adminProductService.edit(product);
		            
		            // Chuy·ªÉn h∆∞·ªõng sau khi th√†nh c√¥ng
		            resp.sendRedirect(req.getContextPath() + "/admin/products?id=" + id + "&message=updated");
		            return;
		            
		        } else {
		            // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng t√¨m th·∫•y Product
		            resp.sendError(HttpServletResponse.SC_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ ch·ªânh s·ª≠a.");
		            return;
		        }
		    } catch (NumberFormatException e) {
		        // X·ª≠ l√Ω l·ªói chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu (ID, Price, Stock...)
		        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá.");
		        return;
		    } 
		}

		// Sau khi th√™m/s·ª≠a, chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch
		resp.sendRedirect(req.getContextPath() + "/admin/products");
	}
}