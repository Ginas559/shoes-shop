// filepath: src/main/java/vn/iotstar/controllers/auth/LoginServlet.java
package vn.iotstar.controllers.auth;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;

import vn.iotstar.entities.User;
import vn.iotstar.services.AuthService;

@WebServlet(urlPatterns = {"/login"})
public class LoginServlet extends HttpServlet {

    private AuthService authService;

    @Override
    public void init() throws ServletException {
        // Kh·ªüi t·∫°o service d√πng EntityManager m·∫∑c ƒë·ªãnh
        this.authService = new AuthService();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        // N·∫øu ƒë√£ c√≥ phi√™n session c≈© th√¨ ƒëi·ªÅu h∆∞·ªõng theo vai tr√≤
        HttpSession session = req.getSession(false);
        if (session != null && session.getAttribute("userId") != null) {
            redirectByRole(resp, req.getContextPath(), (String) session.getAttribute("role"));
            return;
        }

        req.getRequestDispatcher("/WEB-INF/views/auth/login.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        req.setCharacterEncoding("UTF-8");
        final String email = req.getParameter("email");
        final String password = req.getParameter("password");

        if (email == null || email.isBlank() || password == null || password.isBlank()) {
            req.setAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·ªß Email v√† M·∫≠t kh·∫©u.");
            req.getRequestDispatcher("/WEB-INF/views/auth/login.jsp").forward(req, resp);
            return;
        }

        try {
            // X√°c th·ª±c t√†i kho·∫£n b·∫±ng service (m·∫≠t kh·∫©u ƒë√£ hash)
            User u = authService.login(email, password); // n√©m IllegalStateException khi l·ªói

            // L∆∞u session ƒë·ªÉ t∆∞∆°ng th√≠ch ph·∫ßn c≈© (fallback cho staff, ho·∫∑c n∆°i kh√°c c√≤n d√πng session)
            HttpSession session = req.getSession(true);

            // --- üü¢ ƒê·ªìng nh·∫•t key session tr√™n to√†n h·ªá th·ªëng ---
            session.setAttribute("authUser", u);        // t√™n chu·∫©n ƒë·ªÉ c√°c servlet kh√°c d√πng
            session.setAttribute("currentUser", u);     // gi·ªØ nguy√™n key c≈© ƒë·ªÉ kh√¥ng l·ªói ch·ªó kh√°c
            session.setAttribute("user", u);            // b·ªï sung cho JSP ho·∫∑c filter d√πng key "user"
            session.setAttribute("userId", u.getId());  // key s·ªë nguy√™n d√πng ·ªü OrderServlet
            session.setAttribute("email", u.getEmail());
            session.setAttribute("role", u.getRole().name()); // USER | ADMIN | VENDOR | SHIPPER
            // ---------------------------------------------------

            // H·ªó tr·ª£ staff: n·∫øu user thu·ªôc 1 shop, set staffShopId ƒë·ªÉ whitelist c√°c trang staff
            if (u.getStaffShop() != null) {
                session.setAttribute("staffShopId", u.getStaffShop().getShopId());
            } else {
                session.removeAttribute("staffShopId");
            }

            // JWT: ph√°t access token sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            // L√Ω do: d√πng cookie httpOnly ƒë·ªÉ tr√°nh JS ƒë·ªçc token; Filter s·∫Ω ƒë·ªçc token t·ª´ cookie ho·∫∑c Authorization header.
            String token = authService.issueAccessToken(u);

            Cookie cookie = new Cookie("access_token", token);
            cookie.setHttpOnly(true);
            cookie.setPath("/"); // token c√≥ hi·ªáu l·ª±c to√†n site
            // N·∫øu ch·∫°y HTTPS, c√≥ th·ªÉ b·∫≠t cookie.setSecure(true)
            resp.addCookie(cookie);

            // SameSite=Lax ƒë·ªÉ h·∫°n ch·∫ø g·ª≠i cookie trong b·ªëi c·∫£nh cross-site th√¥ng th∆∞·ªùng
            resp.addHeader("Set-Cookie", "access_token=" + token + "; Path=/; HttpOnly; SameSite=Lax");

            // ƒêi·ªÅu h∆∞·ªõng theo vai tr√≤ cho r√µ r√†ng khi tr√¨nh b√†y v·ªõi gi·∫£ng vi√™n
            redirectByRole(resp, req.getContextPath(), u.getRole().name());

        } catch (IllegalStateException ex) {
            req.setAttribute("error", ex.getMessage());
            req.getRequestDispatcher("/WEB-INF/views/auth/login.jsp").forward(req, resp);
        } catch (Exception ex) {
            ex.printStackTrace();
            req.setAttribute("error", "C√≥ l·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.");
            req.getRequestDispatcher("/WEB-INF/views/auth/login.jsp").forward(req, resp);
        }
    }

    private void redirectByRole(HttpServletResponse resp, String ctx, String role) throws IOException {
        if ("ADMIN".equalsIgnoreCase(role)) {
            resp.sendRedirect(ctx + "/admin/dashboard");
        } else if ("VENDOR".equalsIgnoreCase(role)) {
            resp.sendRedirect(ctx + "/vendor/dashboard");
        } else if ("ShIPPER".equalsIgnoreCase(role) || "SHIPPER".equalsIgnoreCase(role)) {
            resp.sendRedirect(ctx + "/shipper/statistics/view");
        } else {
            // USER ho·∫∑c c√°c role kh√°c
            resp.sendRedirect(ctx + "/");
        }
    }
}
