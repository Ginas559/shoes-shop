// filepath: src/main/webapp/WEB-INF/views/public/shop-chat-public.jsp

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c"  uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>

<%-- Thi·∫øt l·∫≠p Context Path --%>
<c:set var="ctx" value="${pageContext.request.contextPath}" />

<%-- L·∫•y th√¥ng tin User t·ª´ Session --%>
<%-- Th·ª≠ l·∫•y object user n·∫øu d·ª± √°n c√≥ set; fallback sang session attributes do LoginServlet set --%>
<c:set var="u" value="${not empty sessionScope.currentUser ? sessionScope.currentUser : sessionScope.user}" />
<c:set var="roleAttr" value="${sessionScope.role}" />
<c:set var="emailAttr" value="${sessionScope.email}" />

<%-- X·ª≠ l√Ω nickname cho Chat --%>
<c:choose>
    <c:when test="${not empty u}">
        <%-- L·∫•y Role t·ª´ object User ho·∫∑c fallback t·ª´ session --%>
        <c:set var="rolePart" value="${empty u.role ? (empty roleAttr ? 'GUEST' : roleAttr) : u.role}" />

        <%-- L·∫•y T√™n: ∆∞u ti√™n firstname > fullName > t√™n tr∆∞·ªõc @ c·ªßa email > fallback 'user' --%>
        <c:set var="namePart"
               value="${not empty u.firstname
                      ? u.firstname
                      : (not empty u.fullName
                        ? u.fullName
                        : (not empty u.email
                          ? fn:substringBefore(u.email,'@')
                          : (not empty emailAttr ? fn:substringBefore(emailAttr,'@') : 'user')))}" />
    </c:when>
    <c:otherwise>
        <%-- Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p: d√πng session attributes ho·∫∑c fallback 'GUEST'/'user' --%>
        <c:set var="rolePart" value="${empty roleAttr ? 'GUEST' : roleAttr}" />
        <c:set var="namePart" value="${not empty emailAttr ? fn:substringBefore(emailAttr,'@') : 'user'}" />
    </c:otherwise>
</c:choose>

<%-- Nickname cu·ªëi c√πng: ROLE_NAME --%>
<c:set var="nick" value="${rolePart}_${namePart}" />

<%--- Giao di·ªán v√† Style ---%>
<style>
  #chatBox { height: 420px; overflow-y: auto; white-space: pre-wrap; }
  #chatBox > div { margin-bottom: 6px; }
</style>

<div class="container py-4">
  <h3 class="mb-3">üí¨ Ph√≤ng chat c√¥ng khai c·ªßa shop: <c:out value="${shop.shopName}" /></h3>

  <%-- Khung hi·ªÉn th·ªã tin nh·∫Øn --%>
  <div id="chatBox" class="border rounded bg-light p-3 mb-3"></div>

  <%-- Form nh·∫≠p tin nh·∫Øn --%>
  <form id="chatForm" onsubmit="return false;" class="d-flex gap-2">
    <input id="msgInput" class="form-control" placeholder="Nh·∫≠p tin nh·∫Øn‚Ä¶" />
    <button id="sendBtn" type="button" class="btn btn-primary">G·ª≠i</button>
  </form>
</div>

<%--- Logic JavaScript cho WebSocket ---%>
<script>
(function () {
  const ctx    = '${ctx}';
  const shopId = '${param.shopId}';

  if (!shopId) {
    console.warn('Missing shopId');
    return;
  }

  // Escape XML ƒë·ªÉ ƒë·∫£m b·∫£o nickname an to√†n khi ƒë∆∞a v√†o URL
  const nick = encodeURIComponent('${fn:escapeXml(nick)}');

  // X√¢y d·ª±ng URL WebSocket: th√™m room=public ƒë·ªÉ t√°ch kh·ªèi ph√≤ng n·ªôi b·ªô
  const wsUrl = (location.protocol === 'https:' ? 'wss://' : 'ws://')
              + location.host + ctx + '/ws/chat/' + shopId + '?room=public&nick=' + nick;

  // L·∫•y c√°c ph·∫ßn t·ª≠ DOM
  const box   = document.getElementById('chatBox');
  const input = document.getElementById('msgInput');
  const btn   = document.getElementById('sendBtn');

  // H√†m th√™m tin nh·∫Øn v√†o chat box
  function append(t) {
    const d = document.createElement('div');
    d.textContent = t;
    box.appendChild(d);
    // Cu·ªôn xu·ªëng cu·ªëi
    box.scrollTop = box.scrollHeight;
  }

  let ws;

  // H√†m k·∫øt n·ªëi WebSocket
  function connect() {
    ws = new WebSocket(wsUrl);
    ws.onopen    = () => append('üîå ƒê√£ k·∫øt n·ªëi.');
    ws.onmessage = (e) => append(e.data);
    ws.onclose   = () => append('‚ùå M·∫•t k·∫øt n·ªëi.');
    ws.onerror   = () => append('‚ö†Ô∏è L·ªói k·∫øt n·ªëi.');
  }

  // S·ª± ki·ªán n√∫t G·ª≠i
  btn.addEventListener('click', () => {
    const t = (input.value || '').trim();
    // Ki·ªÉm tra tin nh·∫Øn, ƒë·ªëi t∆∞·ª£ng ws v√† tr·∫°ng th√°i k·∫øt n·ªëi (readyState 1: OPEN)
    if (!t || !ws || ws.readyState !== 1) return;

    ws.send(t);
    input.value = ''; // X√≥a n·ªôi dung input sau khi g·ª≠i
  });

  // S·ª± ki·ªán ph√≠m Enter trong input
  input.addEventListener('keydown', (e) => {
    // N·∫øu l√† ph√≠m Enter v√† kh√¥ng nh·∫•n Shift, ngƒÉn h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh v√† click n√∫t G·ª≠i
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      btn.click();
    }
  });

  // Kh·ªüi t·∫°o k·∫øt n·ªëi khi t·∫£i trang
  connect();
})();
</script>